-- Exporter.lua (ModuleScript)
-- Path: ServerScriptService/VFXEditor/Exporter.lua

local Config = require(script.Parent.Config)

local Exporter = {}

function Exporter.generateModuleScriptCode(timeline)
	local tracksData = {}
	local totalDuration = 0

	for _, track in ipairs(timeline:GetChildren()) do
		if track:IsA("TextButton") and track.Name == "TimelineTrack" then
			local startTime = track:GetAttribute("StartTime")
			local duration = track:GetAttribute("Duration")
			if startTime + duration > totalDuration then
				totalDuration = startTime + duration
			end

			local attributes = track:GetAttributes()
			table.insert(tracksData, attributes)
		end
	end

	local code = [[
-- This ModuleScript was generated by the VFX Editor Plugin.
local Debris = game:GetService("Debris")
local TweenService = game:GetService("TweenService")
local Utils = require(script.Parent.Utils)
local VFX = {}

VFX.Configuration = {
    TotalDuration = ]]..tostring(totalDuration)..[[,
    Tracks = {
]]

	for _, data in ipairs(tracksData) do
		code = code .. "\t\t{\n"
		for key, value in pairs(data) do
			local formattedValue
			if typeof(value) == "string" then
				formattedValue = '"' .. tostring(value):gsub('"', '\\"') .. '"'
			elseif typeof(value) == "Color3" then
				formattedValue = string.format("Color3.fromRGB(%.2f, %.2f, %.2f)", value.r * 255, value.g * 255, value.b * 255)
			else
				formattedValue = tostring(value)
			end
			code = code .. string.format("\t\t\t%s = %s,\n", key, formattedValue)
		end
		code = code .. "\t\t},\n"
	end

	code = code .. [[
    }
}

function VFX.play(position, overrideParameters)
    overrideParameters = overrideParameters or {}
    local root = Instance.new("Model")
    root.Name = "VFX_Instance"
    
    for _, trackData in ipairs(VFX.Configuration.Tracks) do
        task.delay(trackData.StartTime, function()
            if not root or not root.Parent then return end
            
            if trackData.ComponentType == "Light" then
                local lightAttachment = Instance.new("Attachment")
                lightAttachment.WorldPosition = position
                
                local pointLight = Instance.new("PointLight")
                pointLight.Enabled = overrideParameters.Enabled ~= nil and overrideParameters.Enabled or trackData.Enabled
                pointLight.Brightness = overrideParameters.Brightness or trackData.Brightness
                pointLight.Color = overrideParameters.Color or trackData.Color
                pointLight.Range = overrideParameters.Range or trackData.Range
                pointLight.Shadows = overrideParameters.Shadows or trackData.Shadows
                pointLight.Parent = lightAttachment
                
                lightAttachment.Parent = root
                Debris:AddItem(lightAttachment, trackData.Duration)
                
            elseif trackData.ComponentType == "SpotLight" or trackData.ComponentType == "SurfaceLight" then
                local lightAttachment = Instance.new("Attachment")
                lightAttachment.WorldPosition = position
                
                local light
                if trackData.ComponentType == "SpotLight" then
                	light = Instance.new("SpotLight")
                else
                	light = Instance.new("SurfaceLight")
                end
                
                light.Enabled = overrideParameters.Enabled ~= nil and overrideParameters.Enabled or trackData.Enabled
                light.Brightness = overrideParameters.Brightness or trackData.Brightness
                light.Color = overrideParameters.Color or trackData.Color
                light.Range = overrideParameters.Range or trackData.Range
                light.Angle = overrideParameters.Angle or trackData.Angle
                light.Face = Enum.NormalId[overrideParameters.Face or trackData.Face]
                light.Shadows = overrideParameters.Shadows or trackData.Shadows
                light.Parent = lightAttachment
                
                lightAttachment.Parent = root
                Debris:AddItem(lightAttachment, trackData.Duration)
                
            elseif trackData.ComponentType == "Sound" then
                local sound = Instance.new("Sound")
                sound.SoundId = overrideParameters.SoundId or trackData.SoundId
                sound.Volume = overrideParameters.Volume or trackData.Volume
                sound.PlaybackSpeed = overrideParameters.PlaybackSpeed or trackData.PlaybackSpeed
                sound.Looped = overrideParameters.Looped or trackData.Looped
                sound.TimePosition = overrideParameters.TimePosition or trackData.TimePosition
                sound.RollOffMode = Enum.RollOffMode[overrideParameters.RollOffMode or trackData.RollOffMode]
                sound.RollOffMinDistance = overrideParameters.RollOffMinDistance or trackData.RollOffMinDistance
                sound.RollOffMaxDistance = overrideParameters.RollOffMaxDistance or trackData.RollOffMaxDistance
                sound.Parent = root
                sound:Play()
                Debris:AddItem(sound, trackData.Duration + 5)
                
            elseif trackData.ComponentType == "Particle" then
                local particleAttachment = Instance.new("Attachment")
                particleAttachment.WorldPosition = position
                
                local emitter = Instance.new("ParticleEmitter")
                emitter.Enabled = overrideParameters.Enabled ~= nil and overrideParameters.Enabled or trackData.Enabled
                emitter.Rate = overrideParameters.Rate or trackData.Rate
                emitter.Lifetime = Utils.parseNumberRange(overrideParameters.Lifetime or trackData.Lifetime)
                emitter.Size = Utils.parseNumberSequence(overrideParameters.Size or trackData.Size)
                emitter.Color = Utils.parseColorSequence(overrideParameters.Color or trackData.Color)
                emitter.Texture = overrideParameters.Texture or trackData.Texture
                local spreadAngle = tostring(overrideParameters.SpreadAngle or trackData.SpreadAngle)
				local spreadAngleParts = spreadAngle:split(" ")
				emitter.SpreadAngle = Vector2.new(tonumber(spreadAngleParts[1]) or 0, tonumber(spreadAngleParts[2]) or tonumber(spreadAngleParts[1]) or 0)
                emitter.Acceleration = Utils.parseVector3(overrideParameters.Acceleration or trackData.Acceleration)
                emitter.Drag = overrideParameters.Drag or trackData.Drag
                emitter.EmissionDirection = Enum.NormalId[overrideParameters.EmissionDirection or trackData.EmissionDirection]
                emitter.LightEmission = overrideParameters.LightEmission or trackData.LightEmission
                emitter.LightInfluence = overrideParameters.LightInfluence or trackData.LightInfluence
                emitter.Orientation = Enum.ParticleOrientation[overrideParameters.Orientation or trackData.Orientation]
                emitter.RotSpeed = Utils.parseNumberRange(overrideParameters.RotSpeed or trackData.RotSpeed)
                emitter.Rotation = Utils.parseNumberRange(overrideParameters.Rotation or trackData.Rotation)
                emitter.Speed = Utils.parseNumberRange(overrideParameters.Speed or trackData.Speed)
                emitter.Squash = Utils.parseNumberSequence(overrideParameters.Squash or trackData.Squash)
                emitter.TimeScale = overrideParameters.TimeScale or trackData.TimeScale
                emitter.Transparency = Utils.parseNumberSequence(overrideParameters.Transparency or trackData.Transparency)
                emitter.ZOffset = overrideParameters.ZOffset or trackData.ZOffset
                emitter.Parent = particleAttachment
                
                particleAttachment.Parent = root
                Debris:AddItem(particleAttachment, trackData.Duration)
                
            elseif trackData.ComponentType == "Beam" then
                local beam = Instance.new("Beam")
                beam.Enabled = overrideParameters.Enabled ~= nil and overrideParameters.Enabled or trackData.Enabled
                beam.Color = Utils.parseColorSequence(overrideParameters.Color or trackData.Color)
                beam.Texture = overrideParameters.Texture or trackData.Texture
                beam.Width0 = overrideParameters.Width0 or trackData.Width0
                beam.Width1 = overrideParameters.Width1 or trackData.Width1
                beam.CurveSize0 = overrideParameters.CurveSize0 or trackData.CurveSize0
                beam.CurveSize1 = overrideParameters.CurveSize1 or trackData.CurveSize1
                beam.FaceCamera = overrideParameters.FaceCamera or trackData.FaceCamera
                beam.LightEmission = overrideParameters.LightEmission or trackData.LightEmission
                beam.LightInfluence = overrideParameters.LightInfluence or trackData.LightInfluence
                beam.Segments = overrideParameters.Segments or trackData.Segments
                beam.TextureLength = overrideParameters.TextureLength or trackData.TextureLength
                beam.TextureMode = Enum.TextureMode[overrideParameters.TextureMode or trackData.TextureMode]
                beam.TextureSpeed = overrideParameters.TextureSpeed or trackData.TextureSpeed
                beam.Transparency = Utils.parseNumberSequence(overrideParameters.Transparency or trackData.Transparency)
                beam.ZOffset = overrideParameters.ZOffset or trackData.ZOffset

                local attachment0 = Instance.new("Attachment")
                attachment0.WorldPosition = position + Utils.parseVector3(overrideParameters.Attachment0Offset or trackData.Attachment0Offset)
                attachment0.Parent = root
                
                local attachment1 = Instance.new("Attachment")
                attachment1.WorldPosition = position + Utils.parseVector3(overrideParameters.Attachment1Offset or trackData.Attachment1Offset)
                attachment1.Parent = root

                beam.Attachment0 = attachment0
                beam.Attachment1 = attachment1
                beam.Parent = root
                Debris:AddItem(beam, trackData.Duration)
                
            elseif trackData.ComponentType == "Trail" then
                local trailPart = Instance.new("Part")
                trailPart.Size = Vector3.new(0.1, 0.1, 0.1)
                trailPart.Transparency = 1
                trailPart.Anchored = true
                trailPart.CFrame = CFrame.new(position + Utils.parseVector3(overrideParameters.StartPosition or trackData.StartPosition))
                
                local attachment0 = Instance.new("Attachment")
                attachment0.Parent = trailPart
                local attachment1 = Instance.new("Attachment")
                attachment1.Position = Vector3.new(0, 0, -1)
                attachment1.Parent = trailPart

                local trail = Instance.new("Trail")
                trail.Enabled = overrideParameters.Enabled ~= nil and overrideParameters.Enabled or trackData.Enabled
                trail.Color = Utils.parseColorSequence(overrideParameters.Color or trackData.Color)
                trail.Texture = overrideParameters.Texture or trackData.Texture
                trail.Lifetime = overrideParameters.Lifetime or trackData.Lifetime
                trail.WidthScale = Utils.parseNumberSequence(overrideParameters.WidthScale or trackData.WidthScale)
                trail.FaceCamera = overrideParameters.FaceCamera or trackData.FaceCamera
                trail.LightEmission = overrideParameters.LightEmission or trackData.LightEmission
                trail.LightInfluence = overrideParameters.LightInfluence or trackData.LightInfluence
                trail.MinLength = overrideParameters.MinLength or trackData.MinLength
                trail.MaxLength = overrideParameters.MaxLength or trackData.MaxLength
                trail.TextureLength = overrideParameters.TextureLength or trackData.TextureLength
                trail.TextureMode = Enum.TextureMode[overrideParameters.TextureMode or trackData.TextureMode]
                trail.Transparency = Utils.parseNumberSequence(overrideParameters.Transparency or trackData.Transparency)
                trail.Attachment0 = attachment0
                trail.Attachment1 = attachment1
                trail.Parent = trailPart
                
                trailPart.Parent = root
                
                local tweenInfo = TweenInfo.new(trackData.Duration, Enum.EasingStyle.Linear)
                local goal = {CFrame = CFrame.new(position + Utils.parseVector3(overrideParameters.EndPosition or trackData.EndPosition))}
                local tween = TweenService:Create(trailPart, tweenInfo, goal)
                tween:Play()
                
                Debris:AddItem(trailPart, trackData.Duration)
            end
        end)
    end
    
    root.Parent = workspace
    Debris:AddItem(root, VFX.Configuration.TotalDuration)
end

return VFX
]]
	return code
end

function Exporter.export(timeline, vfxContainer)
	if not vfxContainer or not vfxContainer:FindFirstChild("Configuration") then
		warn("Please select a valid VFX Container.")
		return
	end

	local moduleCode = Exporter.generateModuleScriptCode(timeline)

	local existing = vfxContainer:FindFirstChild("VFX_Module")
	if existing then existing:Destroy() end

	local moduleScript = Instance.new("ModuleScript")
	moduleScript.Name = "VFX_Module"
	moduleScript.Source = moduleCode
	moduleScript.Parent = vfxContainer

	-- Also copy the Utils module if it doesn't exist
	if not vfxContainer:FindFirstChild("Utils") then
		local utilsSource = script.Parent:FindFirstChild("Utils")
		if utilsSource then
			utilsSource:Clone().Parent = vfxContainer
		end
	end

	print("Exported successfully.")
end

return Exporter
