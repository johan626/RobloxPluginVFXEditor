-- Exporter.lua (ModuleScript)
-- Path: ServerScriptService/VFXEditor/Exporter.lua

local Config = require(script.Parent.Config)

local Exporter = {}

function Exporter.generateModuleScriptCode(timeline)
	local tracksData = {}
	local totalDuration = 0

	for _, track in ipairs(timeline:GetChildren()) do
		if track:IsA("TextButton") and track.Name == "TimelineTrack" then
			local startTime = track.Position.X.Offset / Config.PIXELS_PER_SECOND
			local duration = track.Size.X.Offset / Config.PIXELS_PER_SECOND
			if startTime + duration > totalDuration then
				totalDuration = startTime + duration
			end

			local attributes = track:GetAttributes()
			attributes.StartTime = startTime
			attributes.Duration = duration
			table.insert(tracksData, attributes)
		end
	end

	local code = [[
-- This ModuleScript was generated by the VFX Editor Plugin.
local Debris = game:GetService("Debris")
local VFX = {}

VFX.Configuration = {
    TotalDuration = ]]..tostring(totalDuration)..[[,
    Tracks = {
]]

	for _, data in ipairs(tracksData) do
		code = code .. "\t\t{\n"
		for key, value in pairs(data) do
			local formattedValue
			if typeof(value) == "string" then
				formattedValue = '"' .. tostring(value) .. '"'
			elseif typeof(value) == "Color3" then
				formattedValue = string.format("Color3.fromRGB(%.2f, %.2f, %.2f)", value.r * 255, value.g * 255, value.b * 255)
			else
				formattedValue = tostring(value)
			end
			code = code .. string.format("\t\t\t%s = %s,\n", key, formattedValue)
		end
		code = code .. "\t\t},\n"
	end

	code = code .. [[
    }
}

function VFX.play(position, overrideParameters)
    overrideParameters = overrideParameters or {}
    local root = Instance.new("Model")
    root.Name = "VFX_Instance"
    
    for _, trackData in ipairs(VFX.Configuration.Tracks) do
        task.delay(trackData.StartTime, function()
            if not root or not root.Parent then return end
            
            if trackData.ComponentType == "Light" then
                local lightAttachment = Instance.new("Attachment")
                lightAttachment.WorldPosition = position
                
                local pointLight = Instance.new("PointLight")
                pointLight.Enabled = overrideParameters.Enabled ~= nil and overrideParameters.Enabled or trackData.Enabled
                pointLight.Brightness = overrideParameters.Brightness or trackData.Brightness
                pointLight.Color = overrideParameters.Color or trackData.Color
                pointLight.Range = overrideParameters.Range or trackData.Range
                pointLight.Parent = lightAttachment
                
                lightAttachment.Parent = root
                Debris:AddItem(lightAttachment, trackData.Duration)
            elseif trackData.ComponentType == "Sound" then
                local sound = Instance.new("Sound")
                sound.SoundId = overrideParameters.SoundId or trackData.SoundId
                sound.Volume = overrideParameters.Volume or trackData.Volume
                sound.PlaybackSpeed = overrideParameters.PlaybackSpeed or trackData.PlaybackSpeed
                sound.Parent = root
                sound:Play()
                -- Sounds are removed automatically, but we add to debris just in case.
                -- Add a bit of extra time to allow the sound to finish playing.
                Debris:AddItem(sound, trackData.Duration + 5)
            end
        end)
    end
    
    root.Parent = workspace
    Debris:AddItem(root, VFX.Configuration.TotalDuration)
end

return VFX
]]
	return code
end

function Exporter.export(timeline, vfxContainer)
	if not vfxContainer or not vfxContainer:FindFirstChild("Configuration") then
		warn("Please select a valid VFX Container.")
		return
	end

	local moduleCode = Exporter.generateModuleScriptCode(timeline)

	local existing = vfxContainer:FindFirstChild("VFX_Module")
	if existing then existing:Destroy() end

	local moduleScript = Instance.new("ModuleScript")
	moduleScript.Name = "VFX_Module"
	moduleScript.Source = moduleCode
	moduleScript.Parent = vfxContainer

	print("Exported successfully.")
end

return Exporter
